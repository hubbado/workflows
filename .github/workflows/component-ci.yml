name: "Eventide component workflow: build and push"

on:
  workflow_call:
    inputs:
      component_name:
        required: true
        type: string
      force_push_image:
        required: false
        type: boolean
        default: false

    secrets:
      GOOGLE_CREDENTIALS:
        required: true
      BUNDLE_RUBYGEMS__PKG__GITHUB__COM:
        required: true
      GCLOUD_PROJECT_ID:
        required: true

jobs:
  build:
    env:
      IMAGEBASE: gcr.io/${{ secrets.GCLOUD_PROJECT_ID }}/${{ inputs.component_name }}
      POSTGRES_HOST_AUTH_METHOD: trust
      PGHOST: postgres
      PGUSER: postgres
      EVENTIDE_DATABASE_URL: postgres://message_store@postgres/message_store
      DATABASE_URL: postgres://postgres@postgres:5432

    runs-on: self-hosted

    services:
      postgres:
        image: postgres:alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    outputs:
      branch: ${{ env.branch }}
      imagetag: ${{ env.imagetag }}

    steps:
      - uses: actions/checkout@v3

      - name: Set branch
        run: echo "branch=${GITHUB_REF_NAME:-$(git branch | grep "\*" | cut -d\  -f2)}" >> $GITHUB_ENV

      - name: Set commit_sha
        run: echo "commit_sha=${GITHUB_SHA:-$(git rev-parse HEAD)}" >> $GITHUB_ENV

      - name: Set imagetag
        run: echo "imagetag=${IMAGETAG:-${{ env.branch }}-$(date +%Y-%m-%d-%H-%M-%z |sed -e 's/+//')-$(echo "${{ env.commit_sha }}"|cut -c1-8)}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v3
        with:
          load: true
          push: false
          cache-from: |
            ${{ env.IMAGEBASE }}:master
          tags: |
            ${{ env.IMAGEBASE }}:${{ env.branch }}
            ${{ env.IMAGEBASE }}:${{ env.imagetag }}
          labels: |
            ${{ inputs.component_name }}
          build-args: |
            BUNDLE_RUBYGEMS__PKG__GITHUB__COM=${{ secrets.BUNDLE_RUBYGEMS__PKG__GITHUB__COM }}

      - name: Tests
        run: |
          docker run --network "${{ job.container.network }}" \
            --env POSTGRES_HOST_AUTH_METHOD=$POSTGRES_HOST_AUTH_METHOD \
            --env PGHOST=$PGHOST \
            --env PGUSER=$PGUSER \
            --env EVENTIDE_DATABASE_URL=$EVENTIDE_DATABASE_URL \
            --env DATABASE_URL=$DATABASE_URL \
            --rm ${{ env.IMAGEBASE }}:${{ env.imagetag }} \
            /bin/bash -c "bin/ci_tests"

  push-image:
    env:
      IMAGEBASE: gcr.io/${{ secrets.GCLOUD_PROJECT_ID }}/${{ inputs.component_name }}

    runs-on: self-hosted

    needs: build

    if: ${{ inputs.force_push_image || github.ref == 'refs/heads/master' && needs.build.result == 'success' }}

    steps:
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GOOGLE_CREDENTIALS }}

      - run: echo ${{ needs.build.outputs.imagetag }} > imagetag

      - name: Cache imagetag
        uses: actions/cache@v3
        env:
          cache-name: cache-imagetag
        with:
          path: imagetag
          key: image-cache-${{ runner.os }}-${{ github.repository }}-${{ github.ref_name }}
          restore-keys: |
            image-cache-${{ runner.os }}-${{ github.repository }}-${{ github.ref_name }}
            image-cache-${{ runner.os }}-${{ github.repository }}-

      - name: Push to registry
        run: |
          docker push "${{ env.IMAGEBASE }}:${{ needs.build.outputs.branch }}"
          docker push "${{ env.IMAGEBASE }}:${{ needs.build.outputs.imagetag }}"
          docker tag "${{ env.IMAGEBASE }}:${{ needs.build.outputs.branch }}" "${{ env.IMAGEBASE }}:latest"
          docker push "${{ env.IMAGEBASE }}:latest"
